{"meta":{"title":"鸿基-梦","subtitle":null,"description":"前端博客,鸿基梦,hjm100,","author":"hjm100","url":"//hjm100.cn/Blogs"},"pages":[],"posts":[{"title":"轻松构建Apache+MySQL+PHP环境","slug":"轻松构建Apache-MySQL-PHP环境","date":"2017-10-13T06:01:08.000Z","updated":"2017-10-13T06:02:11.612Z","comments":true,"path":"2017/10/13/轻松构建Apache-MySQL-PHP环境/","link":"","permalink":"//hjm100.cn/Blogs/2017/10/13/轻松构建Apache-MySQL-PHP环境/","excerpt":"","text":"||–如何使用集成工具调试你的php项目，以及搭建你的数据库–|| 本人选用的工具是：（好用如此简单） |–&gt; XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建站集成软件包。 |–&gt; Navicat for MySQL是一套管理和开发MySQL或MariaDB的理想解决方案，支持单一程序，可同时连接到MySQL和MariaDB。 |–&gt; 这两个软件非常容易得到：Navicat(下载的都是试用版–&gt;我们可以使用破解工具对其破解) |–&gt;破解工具（PatchNavicat.exe）的使用： |–&gt;安装Navicat for MySQL成功后（记着安装的目录，破解有用） |–&gt;打开PatchNavicat.exe |–&gt;选择D:\\nv\\Navicat for MySQL\\navicat.exe |–&gt;打开即可（不要怀疑就是如此简单） |–&gt;中文破解版Navicat for MySQL百度云分享地址:http://pan.baidu.com/s/1mi3etny 密码：vgig |–&gt;附加PatchNavicat.exe奥 Y(^_^)Y 一、配置XAMPP：（本人默认将其安装到D:\\xampp文件夹下） 1.将需要运行的项目放在D:\\xampp\\htdocs文件夹下 2.配置Apache服务：（注意：在httpd.conf文件中 #后面的为注释） –&gt;（1）打开D:\\xampp\\apache\\conf\\httpd.conf这个文件 –&gt;（2）在57行左右 –&gt; 可以添加多端口 –&gt; Listen 80(默认是80端口)多个端口是为了运行多个项目 –&gt;（3）在250行左右–&gt;可以修改默认的运行文件地址即（D:/xampp/htdocs） |–&gt;DocumentRoot “D:/xampp/htdocs” |–&gt; |–&gt;如果你的文件都存放在D:/work目录下文件少的话还可以复制拷贝，如果文件太多的话文件迁移也是个麻烦事 |–&gt;所以你可以自己修改运行文件地址(将上面的两处如下修改即可) |–&gt; 【注意：如果是从地址栏直接拷贝的话需要将反斜杠变为斜杠】 |–&gt;DocumentRoot “D:/work” |–&gt; –&gt;（4）配置服务：在文件的最后添加我们的代码（切记不要随意修改文件）两种配置方式 |–&gt;（1）#配置同域名多端口使用（同域名即为127.0.0.1） |-&gt; 例子：配置127.0.0.1:8080用来访问D:\\xampp\\htdocs\\sharkItOff的项目 |-&gt;（默认会找www文件下的index.html或者index.php） |-&gt; |-&gt; ServerName localhost |-&gt; DocumentRoot D:\\xampp\\htdocs\\sharkItOff |-&gt; |--&gt;（2）#配置多域名(需要配合C:\\Windows\\System32\\drivers\\etc\\hosts文件使用) |-&gt;（hosts用来配置本机的域名） |-&gt; 例子：配置angular.hjm.com用来访问D:\\xampp\\htdocs\\webnotes\\Angular2的项目 |-&gt; # Angular2 # |-&gt;&lt;virtualhost *:80&gt; |-&gt; ServerName angular.hjm.com |-&gt; DocumentRoot D:\\xampp\\htdocs\\webnotes\\Angular2 |-&gt;&lt;/virtualhost&gt; 3.重启apache服务后即可使用上述域名访问我们的项目了 备注：（巧妙使用hosts文件） –&gt; 配置文件地址：C:\\Windows\\System32\\drivers\\etc\\hosts文件(本机域名配置) –&gt;使用：notepad++编辑器打开这个文件（也可以使用笔记本–&gt;保存的时候可能要管理员）但是 –&gt;使用notepad++就不需要了，直接可以保存，就是这么神奇，在hosts文件最后面添加自己设置的域名 –&gt;配置案例：127.0.0.1 angular.hjm.com (尝试一下吧在浏览器输入angular.hjm.com即可访问Angular2这个项目了) Y(^^)Y 就是这么简单，项目就这样可以运行了 Y(^^)Y 二、Navicat for MySQL创建数据库(如果php项目中有数据库本地数据库的访问需要先打开XAMPP的MySQl-&gt;连接-&gt;打开数据库) –&gt; 打开Navicat for MySQL这个软件–&gt; 点击链接–&gt; 填写连接名（主机以及端口，用户名，密码==&gt;都不填）–&gt; 点击链接测试–&gt; 成功后点击确定2.在生成的链接下新建一个数据库–&gt; 数据名自起–&gt; 字符集选择utf8 – UTF-8 Unicode（如果不选会乱码）–&gt; 排序规则选择utf8_general_ci3.如果没有数据库文件就直接新建表（建表一定要有主键：详细内容不过多描述）4.如果有sql文件就可以导入–&gt;（点绿数据库）右键–&gt; 选择运行SQL文件–&gt; 在文件后面选择我们要运行的文件就可以了 总结一下数据库有关操作（待定） 三、起动XAMPP的Apache和MySQl –&gt; 打开XAMPP –&gt; XAMPP Control Panel这个运行文件 –&gt; 点击Apache后面的Start（start开始：stop停止）等到Apache背景变绿色–&gt;开启成功 –&gt; 点击MySQl后面的Start（start开始：stop停止）等到MySQl背景变绿色–&gt;开启成功 注意：（看书百遍，不如动手）使用中可能会遇到多种问题，可以查找相关资料解决，或者留言给我，我们共同解决这些问题！","categories":[{"name":"开发","slug":"开发","permalink":"//hjm100.cn/Blogs/categories/开发/"}],"tags":[{"name":"开发技术","slug":"开发技术","permalink":"//hjm100.cn/Blogs/tags/开发技术/"}]},{"title":"windows常见操作","slug":"windows常见操作","date":"2017-10-12T10:10:15.000Z","updated":"2017-10-12T10:11:30.150Z","comments":true,"path":"2017/10/12/windows常见操作/","link":"","permalink":"//hjm100.cn/Blogs/2017/10/12/windows常见操作/","excerpt":"","text":"1.快捷键大汇总： 1.ctrl+Alt+方向键（上下左右） 调整屏幕的方向 2.home 回到地址栏最前面 3.windows+E 打开我的电脑 4.windows+R 打开CMD2.编辑器快捷键： 1.ctrl+shift+f 在文件中查找 2.shift+alt可以产生多个光标（也是vscode突然产生多光标（电脑不能输入字体）的解决方法）3.命令行： 1.ipconfig 显示ip地址 2.ping 检查网站是否能正常的打开和访问（后跟域名） 3.calc调出系统计算器 4.set /a 10/5 输出2（直接在命令行上面计算方便效率高） 5.cat ~/.gitconfig(快速打开文件)4.如果在保存文本文档的时候出现编码错误就要 另存为–&gt;选择编码格式为utf-8保存即可 5.windows启用或禁用无线连接，点击网络共享中心–&gt;更改适配器设置–&gt;右键无线网络链接 –&gt;禁用（启动） 6.快捷键Ctrl+P 将网页保存为pdf格式 点击保存按钮后即可","categories":[{"name":"开发","slug":"开发","permalink":"//hjm100.cn/Blogs/categories/开发/"}],"tags":[{"name":"web开发技术","slug":"web开发技术","permalink":"//hjm100.cn/Blogs/tags/web开发技术/"}]},{"title":"angular学习总结","slug":"angular学习总结","date":"2017-10-12T02:31:41.000Z","updated":"2017-10-12T09:11:45.202Z","comments":true,"path":"2017/10/12/angular学习总结/","link":"","permalink":"//hjm100.cn/Blogs/2017/10/12/angular学习总结/","excerpt":"","text":"1.定义：Google开源的前端JS结构化框架 作用：动态展示页面数据，并与用户交互 指令：nagular定义的属性/标签/样式/注释 – ng-app(指令):告诉angular管理当前标签声明所在的整个标签都由angular来解析管理 – ng-model:将当前输入框的值与谁关联(属性名：属性值),并作为跟作用域对象($rootScope)的属性 将当前输入框的值关联到内存的$rootScope对象的指定属性(username)上 – :显示数据，从作用域对象的指定属性名上取 显示作用域对象($rootScope)上的属性值上 – ng-inint: 初始化 特性：双向数据绑定、声明式依赖注入、解耦应用逻辑，数据模型和试图、完善的页面指令、定制表单验证、Ajax封装、测试更方便 2.angular是支持双向数据绑定的 View(视图):页面(标签、指令、表达式)；Model(模型):作用域对象(属性、方法)； 数据绑定： 数据从一个地方流向另一个地方，数据从一个位置自动流向另一个位置 单项数据绑定：只支持一个方向; View –&gt; Model : ng-init Model –&gt; View : 双向数据绑定： Model &lt;–&gt; View : ng-model 3.作用域：是一个js实例对象 这个对象的属性、方法，页面都可以直接引用、操作 ng-app指令: 内部创建一个根作用域($rootScope),是所有其它作用域的父对象 4.控制器： 也是一个对象，是我们View与Model之间的桥梁 当我们使用了ng-controller指令，内部就会创建控制器对象 但我们同时的提供控制器的构造函数(必须定义一个$scope的形参) 每定义一个ng-controller指令，内部就会创建一个新的作用域对象输入构造函数中 5.依赖注入： 依赖的对象被别人(调用者)自动注入(传参) 注入的方式： 内部注入:不动态 全局变量：污染全局环境 形参： 动态 这种最好 angular就是通过声明式依赖注入，得到作用域对象 形参名不能随便定义(只是针对当前这种写法) 6.模块： 也是一个对象； 创建模块对象：angular.module(‘模块名’, [依赖的模块]) 通过模块添加控制器： module.controller(&apos;MyController&apos;, function($scope){操作$scope的语句} angular的整体设计也是多模块的 核心模块：angular.js 扩展模块：angular-router.js angular-message.js angular-animate.js 7.表达式： 从作用域对象中读取对应的属性数据来显示数据 不支持if/for/while 支持三目表达式 8.Angular指令：指令(标签、标签属性、类、注释) Angular与Angular的Model交互，扩展页面的动态表现力 –常用的内置指令： ng-app：指定模块名，angular管理的区域 ng-model：双向绑定，输入相关标签（常用于input） ng-init： 初始化数据 ng-click：调用作用域对象的方法(点击时) ng-controller：指定控制器构造函数名，内部会自动创建一个新的作用域(外部的) ng-bind：解决使用{{}}显示数据的闪屏(在很短时间内显示{{}}) ng-repeat：遍历数组显示数据，数组有几个元素就会产生几个新的作用域(&apos;item in arr&apos;); -- 属性： $index、$first、$last、$middle、$odd、$even ng-show：布尔类型，如果为true才会显示；false不显示隐藏 ng-hide：布尔类型，如果为false才会显示；true不显示隐藏 9.过滤器： 在显示数据时可以对数据进行格式化或过滤 单个--&gt;格式化(将别的类型的数据转化为特定格式的字符串) 多个--&gt;过滤(内部的个数变化，但类型不变) -- 不会真正改变被操作数据 1语法：&#123;&#123;express | 过滤器名:补充说明&#125;&#125; –常用内置过滤器： currentcy:货币格式化(文本) number：数值格式化(文本) date：将日期对象格式化(文本) json：将js对象格式化为json(文本) lowercase：将字符串格式化为全小写(文本) uppercasw：将字符串格式化为全大写(文本) limitTo：从一个数组或字符串中过滤出一个新的数组或字符串(根据下标过滤) orderBy:根据指定作用域属性对对象进行排序 filter：从数组中过滤返回一个新数组(根据数据过滤) 10.自定义过滤器： 内置过滤器有限，不能满足页面显示数据的需求 语法： module.filter('myLimitTo', function(){ return function(value, startIndex, endIndex){ // 对value进行过滤处理，并return处理的结果 // 不要修改value本身 } }); 11.编写Angular应用的基本步骤： – 编写基本静态页面； – 将angular.js引入工程中，并在页面中引入 – 在页面中指定ng-app, ng-controller – 在js中定义model和controller – 在controller中初始化数据($scope) – 在页面中通过表达式或指令来显示数据 – 在页面中使用ng-click添加点击监听，并定义对应的方法进行操作 12.服务： 为所有(angular)的应用提供特定功能服务的对象(单例),具有特定的功能可以是Object对象、函数、数组和基本类型 Augular内置多个服务(都以$开头),在controller函数中可以声明注入服务并直接使用 也可以自定义服务，但不要以$开头 – 常用的内置服务： $rootScope与$scope（作用域） $filter（自定义） $http（数据交互） $timeout与$interval 当一个非angular调用的回调函数执行后，不会进行脏数据检查，即使数据变化也不会改变 显示、更新界面的基本步骤 1): 进行脏数据检查 2): 如果有变化，就去更新对应处 13.自定义服务： factory(): 可以自定义 对象 函数 。。。 – 最常用 service(): 只能是对象 provider(): value(): constant(): 14.指令：（angular中最常用，用在html页面中） 内置指令： ng-click:点击事件 ng-blur:失去焦点 $event: 事件参数 ng-class: 值是一个对象 {} ng-style: 值是一个对象 {} ng-include: 动态插入一个模板页面(不是完整的html的页面，可以有表达式) 自定义指令： module.directive(&apos;指令名&apos;, function(){}) restrict : &apos;ECMA&apos;, 默认&apos;A&apos; --&gt; E(element:标签)，C(class:类)，M(mement:属性)，A(attribute:属性) template : &apos;简单的html标签&apos;,（常用） templateUrl : &apos;包含模板标签结构的页面&apos;,--&gt;内部会通过ajax请求得到其html片段模板（常用） replace : true/false, //是否替换指令所在的标签 默认false 若为true,模板就会完全替换标签，否则是插入其标签体（常用） scope: （常用） 使用什么作用域，默认为false，直接使用外部作用域作为当前作用域 如果为true,代表创建一个作用域继承自外部作用域 如果是{},代表创建一个隔离作用域，不从外部作用域继承 --&gt; {} 隔离作用域的绑定策略： 1.基于字符串的绑定 使用 &quot;@&quot; 操作符，绑定的是指定标签属性的字符串 2.基于变量的绑定，使用 &quot;=&quot; 操作符，绑定的是外部作用域的变量 3.基于方法的绑定，使用 &quot;&amp;&quot; 操作符，绑定的是外部作用域的方法 transclude:嵌入转换，默认false; 如果为true,需要与作用域和ng-transclude指令配合使用（常用） controller:引用某个Controller或定义一个新的controller（常用） --&gt;function($scope, $element, $attrs, $transclude) compile:指定编译期执行的函数； 对模板DOM进行处理 ``` bash --&gt;function(){ return pre:function preLink(scope, element, attributes){...} post:function postLink(scope, element, attributes){...} 可以覆盖link的显示 } link : 指定链接期执行的函数； 将作用域和DOM进行链接（常用） --&gt;function(scope, elements,attrs,contrller){ // scope是作用域的对象，通过它可以操作该作用域中的所欲的属性和方法 } require: 指定一个指令的名称（常用） &quot;^xxx&quot;: 查找外部指令的控制器 &quot;?xxx&quot;: 在当前指令中查找控制器，如果没有为null &quot;xxx&quot;: 在当前标签中查找指令的控制器注入到当前指令的link函数中 &quot;?^xxx&quot;: 两种情况都会查找 priority: 优先级，默认是0，最大是1000 优先级高的指令总是优先解析执行； --&gt; ng-repeat的优先级是最高的 terminal: 是否终止优先级较低的指令执行，默认是false }) 15.依赖注入(DI: Dependency Injection)：依赖的对象被自动注入进来 依赖对象：完成特定功能的函数需要某个对象才能实现, 这个对象就是依赖对象 引入依赖对象： 方式一: 内部自己创建 : 不动态 方式二: 全局变量 : 污染全局命名空间 方式三: 形参引入依赖 : 依赖注入使用的方式 定义： 1). 定义函数时, 使用形参声明依赖对象变量, 在函数体中使用依赖对象(我们实现) 2). 函数调用时, 自动将创建好的依赖对象动态传入(框架实现) 3). 例子: 事件监听就使用了依赖注入, event就是依赖对象(event可以是任意名称) angular的依赖引入：形参必须是特定的名称, 否则Angular无法注入抛异常 16.$apply和$watch方法： $apply(): 1). 当scope中的数据发生了改变, angular会将数据同步显示到页面, 这一操作称为&quot;脏数据检查&quot; 2). angular在它的方法执行完后, 都会进行脏数据检查, 3). 在原生JS函数中改变作用域数据, angular是不会进行脏数据检查的 4). 使用$scope的$apply函数可以解决此问题 $scope.$apply(function(){ //在这里更新scope数据, angular会同步更新其页面数据 }); 5). $apply()的本质是调用$digest()去进行脏数据检查更新页面的 $scope.$digest() 6). $apply()虽然也能实现页面更新, 但建议使用$apply() $watch(): 1). angular是双向数据绑定的, Scope中的属性数据发生了改变, 会自动更新页面中对应的数据 2). 但有时, 我们想监视数据的变化情况, 来实现特定的功能 3). Angular提供了$watch()来实现 var unWatch = $scope.$watch(&apos;propertyName&apos;, function(newValue, oldValue){}, deepWatch) 参数一: 指定监视属性的属性名 参数二: 发现数据发生改变时的回调函数 参数三: 是否深度监视, 默认是false, 代表只是监视属性本身, 而不监视其内部数据 返回值: 用于取消监视的函数, 调用unWatch()取消监视 17.视图和路由 SPA:(simple page application) 单页应用 对单页应用来讲，视图和路由的作用可以从一个视图跳转到另外一个视图,可以合理管理用户在使用过程中看到的界面 -- 引入：将angular-route.js添加到项目中--&gt;在页面中引入此文件--&gt;创建应用module时加载此模块 -- 实例： 主页面： ``` bash &lt;div ng-controller=&quot;MyController&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#/a&quot;&gt;click a&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#/b&quot;&gt;click b&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ng-view&gt;&lt;/ng-view&gt; &lt;/div&gt; 模板页面a: &lt;div style=\"height:500px;width:100%;background-color:green;\"&gt;{{hello}}&lt;/div&gt; 模板页面b: &lt;div style=\"height:2500px;width:100%;background-color:blue;\"&gt;{{hello}}&lt;/div&gt; JS实现： angular.module('myApp',['ngRoute']) .config(function ($routeProvider) { $routeProvider .when('/a', { templateUrl : 'a.html', //加载指定template页面替换 &lt;ng-View&gt; controller : 'AController' }) .when('/b', { templateUrl : 'b.html', controller : 'BController' }) .otherwise({ redirectTo : '/a' }); }) .controller('AController', function ($scope) { $scope.hello = \"this is a.html\"; }) .controller('BController', function ($scope) { $scope.hello = \"this is b.html\"; }) .controller('MyController', function($scope){ //$scope.hello = \"this is xxx.html\"; }); 18.表单验证： 使用angular-messages扩展库 安装Chorme插件：AngularJS Baterarang 可以查看作用域对象中的属性变化情况 表单：当前$scope下会有对应的属性对象, 属性名为form的name属性 表单对象包含以下重要属性: 1). $dirty : 表示用户是否输入过数据, 初始值为false, 一旦用户输入数据就会为true 2). $valid : 表示整个表单是否是合法的, 一旦有一个表单项不合法,就会为false 3). $invalid : 与$valide值相反 4). 表单项属性: 保存表单项的验证相关信息 表单项：form属性对象下有对应的属性对象, 属性名为表单项的name属性，表单项对象包含以下重要属性 1). $dirty : 表示用户是否输入过数据, 初始值为false, 一旦用户输入数据就会为true 2). $valid : 表示整个表单是否是合法的, 一旦有一个表单项不合法,就会为false 3). $invalid : 与$valide值相反 4). $error : 包含错误名称的对象, 属性名为特定的验证名称, 值为true: {require : true} 编码： 在表单字段上定义验证指令： ng-required = &quot;true&quot; 必填项； ng-minlength ng-maxlength ng-pattern=&quot;/^[a-zA-Z]$/&quot; type=&quot;email/url&quot; min max 提示信息： ng-messages: 读取表单项中的$error对象 ng-messages=&quot;nameForm.username.$error&quot; ng-message: 读取$error对象中验证名称属性，如果为true才会显示当前标签 ng-message=&quot;minlength&quot; ng-show: 控制包含提示信息的标签是否显示 ng-show=&quot;nameForm.username.$dirty&amp;&amp;nameForm.username.$invalid&quot; ng-bind: 指定提示信息文本字符串 ng-bind=&quot;字符串最少为4&quot; ng-class: 避免出现红色提示区域闪烁的情况 ng-class=&quot;&apos;alert alert-danger help-block&apos;&quot; 实例： &lt;div ng-show=\"myForm.username.$dirty&amp;&amp;myForm.username.$invalid\" ng-messages=\"myForm.username.$error\" class=\"alert alert-danger help-block\"&gt; &lt;span ng-message=\"required\" ng-bind=\"'必填项'\"&gt;&lt;/span&gt; &lt;span ng-message=\"minlength\" ng-bind=\"'字符太短小于4'\"&gt;&lt;/span&gt; &lt;span ng-message=\"pattern\" ng-bind=\"'开头必须是字母'\"&gt;&lt;/span&gt; &lt;/div&gt; 19.MVC与MVVM: 通用： 模型Model: 存储数据的实体模型，操作数据的业务模型 视图View: 显示数据，响应用户操作，与用户进行交互 控制器Controller:操作模型数据，更新视图，View与Model之间的桥梁 angular中的MVC: 模型Model: scope 存储数据的容器 提供操作数据的方法 视图View: html/css/directive/expression 显示Model的数据，将数据同步到Model 与用户交互 控制器Controller： controller 初始化Ｍodel的数据 为Model添加行为方法 MVVM： View &lt;–&gt; ViewModel &lt;–&gt; Model MVVM是MVC的进化版，Angular使用的是MVVM 双向数据绑定 备注：如有错误与不全面的地方希望大牛补充，谢谢！！！！！！ 更多内容请访问：angular中的自定义过滤器使用：http://git.oschina.net/hjm100/codes/nr9vfgxh3tzajiswl6omd34 angular中的服务使用：http://git.oschina.net/hjm100/codes/6scz41ryv9xf70gtbowkh50 angular总结学习：http://git.oschina.net/hjm100/codes/uohp5vsbljqyr1298eixn92 angular中的tab切换：http://git.oschina.net/hjm100/codes/q1csxnui6thoda8melzjf29","categories":[{"name":"学习","slug":"学习","permalink":"//hjm100.cn/Blogs/categories/学习/"}],"tags":[{"name":"angular","slug":"angular","permalink":"//hjm100.cn/Blogs/tags/angular/"}]},{"title":"开发操作小妙招","slug":"开发操作小妙招","date":"2017-10-11T02:02:04.000Z","updated":"2017-10-12T09:11:45.205Z","comments":true,"path":"2017/10/11/开发操作小妙招/","link":"","permalink":"//hjm100.cn/Blogs/2017/10/11/开发操作小妙招/","excerpt":"","text":"1.删除node_modules包npm install rimraf -grimraf node_modules也可以使用： 直接删除 rm -f node_modules 需要确认是否删除： rm -i node_modules 2..https与http的区别： https是http的安全版，即http下加入SSL层，https的安全基础是SSL层， 3.anywhere 随启随用的静态文件服务器使用前需要先安装：npm install anywhere -g然后在目标文件夹执行git命令行：anywhere认不添加 -s 命令会在命令敲击后，同时打开浏览器访问 http://localhost:8000/ 这个路径。anywhere -p 8000 ## 指定静态服务器的端口号anywhere -s ## 静默执行，不打开浏览器 4.开发过程中的谷歌卡发工具样式妙招针对色值选择，可以在style中输入后点击颜色图标可以出现色值选择表可以微调的，可以使用吸管吸取网页中的其它区域颜色，与ColorCop用法一样（好用） 5.开发过程中需要看很多外国文档，比如angular需要你的浏览器越狱，推荐一个越狱软件蓝灯：下载地址链接：http://pan.baidu.com/s/1boYpxCz 密码：rn6q 6.清楚浏览器缓存的快捷方法1.ctrl+shift+N.即可无痕浏览网页了！2.ctrl+H快速打开历史记录3.清除Google浏览器缓存的快捷键 Ctrl+Shift+Del rm命令详解（附加文档）rm命令可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉。对于链接文件，只是删除整个链接文件，而原有文件保持不变。注意：使用rm命令要格外小心。因为一旦删除了一个文件，就无法再恢复它。所以，在删除文件之前，最好再看一下文件的内容，确定是否真要删除。rm命令可以用-i选项，这个选项在使用文件扩展名字符删除多个文件时特别有用。使用这个选项，系统会要求你逐一确定是否要删除。这时，必须输入y并按Enter键，才能删除文件。如果仅按Enter键或其他字符，文件不会被删除。语法 rm (选项)(参数)选项-d：直接把欲删除的目录的硬连接数据删除成0，删除该目录；-f：强制删除文件或目录；-i：删除已有文件或目录之前先询问用户；-r或-R：递归处理，将指定目录下的所有文件与子目录一并处理；–preserve-root：不对根目录进行递归操作；-v：显示指令的详细执行过程。参数文件：指定被删除的文件列表，如果参数中含有目录，则必须加上-r或者-R选项。实例交互式删除当前目录下的文件test和examplerm -i test exampleRemove test ?n（不删除文件test)Remove example ?y（删除文件example)删除当前目录下除隐含文件外的所有文件和子目录 rm -r *应注意，这样做是非常危险的! 以上博文出处：http://man.linuxde.net/rm（感谢博主分享）","categories":[{"name":"开发","slug":"开发","permalink":"//hjm100.cn/Blogs/categories/开发/"}],"tags":[{"name":"开发技术","slug":"开发技术","permalink":"//hjm100.cn/Blogs/tags/开发技术/"}]},{"title":"工作日常习惯","slug":"工作日常习惯","date":"2017-10-09T14:06:22.000Z","updated":"2017-10-12T09:11:45.204Z","comments":true,"path":"2017/10/09/工作日常习惯/","link":"","permalink":"//hjm100.cn/Blogs/2017/10/09/工作日常习惯/","excerpt":"","text":"1.上班第一步：打卡、更新代码、登QQ 2.收到设计给的图片后都需要压缩–&gt;压缩网址：https://tinypng.com/ 3.熟知开发流程：分析、设计、计划、实现 分析 =&gt; 业务流程 设计 =&gt; 界面、接口、业务逻辑、数据库 计划 =&gt; 进度安排、分工合作 实现 =&gt; 编码实现、代码结构 4.有问题在技术群里讨论（时刻关注技术群动态“关注自己的工作任务”） 5.提交代码的时候一定要加以说明 6.每次开会之前先总结一下上周工作完成情况（必要） 7.难懂的技术问题（技术困难）先自己解决，实在不能解决请教他人（不要死磕钉子，不懂得及时问，不要拉进度） 8.工作之余就学习，技术问题做总结。（日常有用技术要记录不能天天“查百度”） 个人总结方法：（及时日记文档记录，有空更新码云开源准备） 公众号：标签导航，自动回复 次 码 云：电脑 –&gt; 代码仓库（总结技术） 主 本人码云：https://git.oschina.net/hjm100 百度云盘：书籍存储–&gt;生成链接以供下载 次 9.每周，每日要有工作计划，个人工作计划模板（工作的时候不能太迷） @2017-07-17 ~ @2017-07-21 ------------------------------------------------------------- 1.代理商任务上线准备（完成） 2.优化代理商后台（完成） 3.推广系统前端搭建（未完成） 4.学习新知识（进行中） @2017-07-17 ------------------------------------------------------------- 1.代理商任务bug修改（完成） 2.优化代理商后台验证码倒计时相关页面（完成） 3.编写推广页面 10.时刻总结反思工作不足（知错就改，同一个问题不犯第二次） 本人建议：需要建五个记事本 1.每周计划（包含日常计划） 2.工作记录（记录例会上有关自己的工作，以及项目中的调试方法，等与公司相关内容） 3.生活习惯（工作中的查漏补缺） 4.工作技术分享（记录技术上的不足与总结） 5.更新说明（完成一项工作的时候，项目上线之前，总结一下自己这块需要更新的代码图片等） 如果工作之余需要参与测试的同鞋还可以准备一个测试文档（测试文档可以根据自己的爱好 要描述清楚：测试账号，测试效果，预计效果，效果对比，产生bug，bug来源） 11.项目环境搭建要熟悉，项目存放地点要合理 本人与工作操作项目都在D:\\work中 本人美术图片，产品原型都在：D:\\svn中 本人D盘有代码垃圾存放地，日常记录存放地，前端书籍存放地，等文件夹， 这些文件夹都创建了一个桌面快捷方式，以至于你的桌面不会太乱和快速打开文件所在地 12.桌面不要太乱（本人生活喜欢，桌面太乱容易造成压抑） 13.代码优化：(代码优化是一个项目完美的必经之路)安全性-&gt;运行时稳定性-&gt;清晰度和编码风格-&gt;编码效率-&gt;测试有效性-&gt;性能剖析 14.自我评价： 1.努力学习，不断提高业务能力。在工作中，认真学习业务知识，不断积累经验，不断充实自己。 2.工作中吃苦耐劳，认真完成了本岗位各项工作任务;团结同事，共同努力。由于自己工作经验不足， 平常善于总结，减少工作中的错误，一直以不让错误产生第二步为自己的准则，努力完善自己。 3.在试用期的N个月中，我学到了很多知识，不止是专业技能的提高，更重要的是学会了一套自己的工作方式， 从每天计划到日常工作总结都在以后的工作中受益匪浅。","categories":[],"tags":[{"name":"工作习惯","slug":"工作习惯","permalink":"//hjm100.cn/Blogs/tags/工作习惯/"}]},{"title":"hexo搭建博客","slug":"hexo搭建博客","date":"2017-09-29T02:14:22.000Z","updated":"2017-10-13T04:38:22.938Z","comments":true,"path":"2017/09/29/hexo搭建博客/","link":"","permalink":"//hjm100.cn/Blogs/2017/09/29/hexo搭建博客/","excerpt":"","text":"手把手教你 hexo + github搭建自己的博客以及个人主页 网上有很多这样的资料素材，但是没有一个系统化的教程 使你除了搜怎么搭建个人主页外，还要搜hexo使用教程 况且中间还可能遇到多种多样的坑 本篇文章，告诉你怎么使用github提供的空间，以及搭建自己的博客 本人亲身检测，绿色无公害； 一、环境准备 1.安装Git 下载地址：https://git-scm.com/downloads 2.安装Node.js 下载地址：https://nodejs.org/en/ 3.安装hexo 利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择Git bash） 1npm install -g hexo hexo安装中问题： npm ERR! registry error parsing json 错误 可能需要设置npm代理,执行命令 1npm config set registry http://registry.cnpmjs.org hexo:command not found 删除刚刚安装的npm目录，重新执行命令npm install -g hexo安装hexo， -g为全局安装 二、初始化hexo项目 1.创建hexo文件夹 安装完成后，在你喜爱的文件夹下（如H:\\hexo）， 执行以下指令(在H:\\hexo内点击鼠标右键，选择Git bash)， Hexo 即会自动在目标文件夹建立网站所需要的所有文件。 hexo init（初始化hexo项目） 2.安装依赖包 npm install（安装npm依赖包） 现在我们已经搭建起本地的hexo博客了 hexo命令行使用 常用命令： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546hexo help #查看帮助hexo init #初始化一个目录hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成网页，可以在 public 目录查看整个网站的文件hexo server #本地预览，'Ctrl+C'关闭hexo deploy #部署.deploy目录hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**简写（常用）：hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy``` 3.本地预览执行一下命令：hexo generate 生成网页hexo server 本地预览到浏览器输入localhost:4000可以看到（系统再带的博客页面）。三、更换模板可能系统自带的模板不满足你的需求，没关系hexo提供了很多模板供你选择访问：https://hexo.io/themes/选择自己喜欢的模板吧！本人选择的模板是MiHo 主题地址 http://blog.minhow.com/2017/08/01/blog/installation-configuration/1、搭建自己喜欢的模板1.1 安装主题删除hexo自带的themes文件夹在hexo下clone MiHo 主题``` bash$ git clone https://github.com/WongMinHo/hexo-theme-miho.git themes/miho``` MiHo 主题需要Hexo 3.0或以上版本，请先升级。1.2 更新主题（提供技术支持）``` bashcd themes/miho git pull 1.3 依赖安装 生成站点文章静态数据，用于站内搜索。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586npm install hexo-generator-json-content --save``` 1.4 配置主题此处需要理解：与themes文件同级的_config.yml文件是hexo的项目配置文件（以下定义为‘主配置’）在themes/miho文件中的_config.yml文件是主题的配置文件（以下定义为‘主题配置’）注：可以在_config.yml中定义变量在模板中&lt;%- config.userurl %&gt;引入在主配置下找到theme属性将其定义为theme: miho即可主配置文件属性注释：``` bash# Hexo Configuration## Docs: http://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site #站点信息title: #标题subtitle: #副标题description: #站点描述，给搜索引擎看的author: #作者email: #电子邮箱language: zh-CN #语言# URL #链接格式url: #网址root: / #根目录permalink: :year/:month/:day/:title/ #文章的链接格式tag_dir: tags #标签目录archive_dir: archives #存档目录category_dir: categories #分类目录code_dir: downloads/codepermalink_defaults:# Directory #目录source_dir: source #源文件目录public_dir: public #生成的网页文件目录# Writing #写作new_post_name: :title.md #新文章标题default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）titlecase: false #标题转换成大写external_link: true #在新选项卡中打开连接filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsehighlight: #语法高亮 enable: true #是否启用 line_number: true #显示行号 tab_replace:# Category &amp; Tag #分类和标签default_category: uncategorized #默认分类category_map:tag_map:# Archives2: 开启分页1: 禁用分页0: 全部禁用archive: 2category: 2tag: 2# Server #本地服务器port: 4000 #端口号server_ip: localhost #IP 地址logger: falselogger_format: dev# Date / Time format #日期时间格式date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/time_format: H:mm:ss# Pagination #分页per_page: 10 #每页文章数，设置成 0 禁用分页pagination_dir: page# Disqus #Disqus评论，替换为多说disqus_shortname:# Extensions #拓展插件theme: landscape-plus #主题exclude_generator:plugins: #插件，例如生成 RSS 和站点地图的- hexo-generator-feed- hexo-generator-sitemap# Deployment #部署，将 lmintlcx 改成用户名deploy: type: git repo: github创库地址.git （需要使用ssh） branch: master 不要担心主题配置文件有中文注释，根据提示走就可以轻松搞定 注意：主配置文件中的 url ，root配置url: https://hjm100.github.io/Blogsroot: /Blogs 如果你想要通过https://hjm100.github.io去访问你的博客root: /因为我的https://hjm100.github.io用来装自己的主页，所以我的博客地址架构如上 虽然选择了自己想要的主题，但是主题中显示有关主体信息，以及博客信息，看着就不舒服 特别是网页底部版权那块，教你怎么改： 修改模板标签(用于一般模板不满足个人需求)步骤：用文本编辑器打开 Hexo 所在的目录打开 themes 目录打开你想要编辑的主题所在的目录中的 layout 目录打开 layout 目录下的 _partial 目录打开 _partial 目录下的 footer.ejs 文件修改底部链接post/copyright.ejs用于修改文章页脚用户链接 好了，至此，本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。 四、外网部署（为的就是省钱–哈哈）： github为我们提供了一个放置静态资源的空间，空间不大但是足以满足你博客以及个人主页的部署 如果有后台就不行了（不过可以选择自己租服务器，一个月就50多，不差钱的同鞋可以考虑一下） 以我的为例：github放置个人主页以及博客 1.申请账号，设置公钥这些老生常谈的话题就不用多说了（直接进入主题） 2.创建代码仓库2.1 点击加号穿件仓库New repository2.2仓库名字格式必须为: yourname.github.io （yourname为你的账号名）2.3进入新建的项目点击Settings设置项目找到GitHub Pages 点击change theme选择模板这时你的项目中就有了生成文件（但是这是系统创建的）2.4 不要删除_config.yml文件直接引入你的个人主页项目即可，默认打开index.html ok此时你的个人主页已经搭建好了 Blogs的搭建，你可以新建一个代码仓库（把这个代码仓库设置为html） 在设置中的GitHub Pages 选择Source 中的下拉框为master branch做法与上一样！ 3.仓库分析（yourname.github.io放个人主页，Blogs存放博客） 4.Blogs上传：将主配置中的deploy属性添加一下代码，deploy: type: git repo: 你github上的Blogs的SSH地址（注意ssh必须是系统最先生成的） branch: master 运行命令行 hexo g 编译文件 hexo d 提交文件即可 4.发布博文 在hexo\\source_posts文件夹下新建一个MD文件类型的文档 或者命令行 hexo new 博文创建1234567891011---title: 博文 （博文标题）date: 2017-09-27 14:49:15 （博文时间）categories: hexo #文章文类tags: web开发技术 （ 文章标签）cover_picture: images/exploit.jpg(图片格式)---这里正常写文章即可# 可以理解为h1(但是#后面一定要有空格)``` bash（代码要写在这里面）$ console.log('Hello hjm100') //这里写代码 123注意：博文写好之后一定要先在本地查看后在提交！！！！！！ ```bash 语法：&#123;&#123;express | 过滤器名:补充说明&#125;&#125;（一定要放在bash中） 五、域名的配置（将github提供的二级域名与自己购买的域名绑定）： 1.可以前往腾讯购买一个域名，一般cn域名一年就20多块钱 2.点击 Github 上项目的 Settings，GitHub Pages， 提示Your site is published at http://hjm100.cn (这是我买的域名) Custom domain下面的对话框填写你的域名即可 将独立域名与GitHub Pages的空间绑定 方法一：在站点source目录下面，新建一个名为CNAME的文本文件， 里面写入你要绑定的域名，比如hjm100.cn 方法二：在Repository的根目录下面，新建一个名为CNAME的文本文件， 里面写入你要绑定的域名，比如hjm100.cn 在github上面添加好自己的域名后，不要着急，此时你的域名还没有与博客完全绑定 打开cmd命令行，使用ping hjm100.github.io 查看到git对应的ip地址 前往你购买域名的平台进行ipv4域名解析，输入你ping到的域名即可， 域名解析后，去浏览器访问一下你的域名吧！就是这么神奇！！ 至此你的博客已经搭建完毕了，不要感谢我，本人博客预览hjm100.cn 域名https添加（让你的域名更加安全） 第一步首先注册一个属于自己的域名，可以选择cn域名，不贵一年就20多元我的域名是hjm100.cn 第二步域名https添加， 1.登录这个网站并注册：https://www.cloudflare.com/（直接使用邮箱注册） 2.注册完毕后登录，如果你之前没有用过，则系统会直接显示Add a website对话框，再次填写hjm100.cn(你的域名)点击scan DNS Records即可，系统会自动扫描你的域名（扫描需要等待一定时间） 3.扫描完毕后点击Continue(继续) 4.添加DNS Recordstypt:CNAME类型 name：www Value: 附件小妙招： 怎么换一台电脑仍然可以使用hexo（亲测有用） 1.在Blogs这个项目中创建hexo分支用来储存开发环境（master分支用来存储生成的静态资源） git branch hexo（新建一个hexo分支） 2.将hexo分支发布在github上(这个时候分支中可能有master分支的文件) git push origin hexo(将代码提交到hexo分支上) 3.切换到hexo分支上（如果有文件就清空分支中的内容除了.git文件） git checkout hexo（切换到hexo分支上） 4.整理你的开发环境hexo,修改hexo下面的.gitignore(限制git上传)文件 12345db.json*.lognode_modules/public/.deploy*/ 5.删除themes–&gt;miho文件中的 .git文件以及.gitignore 6.将你上述修改的hexo文件提交到hexo分支里面（不要改错奥）在hexo分之下即可git add .git commit .git push origin hexo 7.当你换电脑的时候，配置公钥以及全局安装npm install -g hexo（请参考以上说明）下载的分支默认显示的是master分支，请切换到hexo分支，cd hexo（进入到hexo文件）执行npm install 安装node模块，按照以上写博客提交博客即可同步 8.切结，修改过hexo文件中的内容后记得提交hexo分支，以免你再次换电脑的时候使用 建议使用最新的git版本以及Node版本，如有问题请留言！！！！","categories":[{"name":"web","slug":"web","permalink":"//hjm100.cn/Blogs/categories/web/"}],"tags":[{"name":"web开发技术","slug":"web开发技术","permalink":"//hjm100.cn/Blogs/tags/web开发技术/"}]},{"title":"一台电脑多个公钥","slug":"一台电脑多个公钥","date":"2017-09-27T06:49:15.000Z","updated":"2017-10-12T09:11:45.203Z","comments":true,"path":"2017/09/27/一台电脑多个公钥/","link":"","permalink":"//hjm100.cn/Blogs/2017/09/27/一台电脑多个公钥/","excerpt":"","text":"windows同一台电脑设置多个公钥与不同github帐号交互 一、生成公钥 安装git，在桌面右键打开 “Git Bash” 键入命令：ssh-keygen -t rsa -C “hjm100@126.com” 提醒你输入key的名称，输入如id_rsa_hjm100;(key的名字为生成公钥或者私钥的文件名) 输入密码，与再次输入密码（这个密码用在你git push或git pull中使用） 在桌面下产生两个文件：id_rsa_hjm100和id_rsa_hjm100.pub 将桌面上的两个文件拷贝到C:\\Users\\admin.ssh里面（你也可以直接在这个.ssh文件夹中打开 “Git Bash”） 二、配置文件config 在C:\\Users\\admin.ssh\\目录下创建一个config文件（注意不带文件后缀） 复制一下代码到这个config文件中 （id_rsa指向公钥的名字–最上面的可以理解为一级公钥，比如博客的提交会调用原始的公钥） 1234567891011#personal accountHost github.comHostName github.comUser gitIdentityFile ~/.ssh/id_rsa#work accountHost github.com-workHostName github.comUser gitIdentityFile ~/.ssh/id_rsa_hjm 三、添加公钥到某个github账号 1.登录自己的账号到github.com的网站上 2.点击头像后点击生成下拉框中的Settings 3.在设置页面点击SSH and GPG keys进入公钥管理页面 4.点击New SSH key 在Title中填写名字（随意的标识） 5.用记事本打开id_rsa.pub文件，复制内容，粘贴到Key输入框中保存即可","categories":[{"name":"开发","slug":"开发","permalink":"//hjm100.cn/Blogs/categories/开发/"}],"tags":[{"name":"web开发技术","slug":"web开发技术","permalink":"//hjm100.cn/Blogs/tags/web开发技术/"}]},{"title":"如何做好项目总结","slug":"如何做好项目总结","date":"2017-08-09T10:21:47.000Z","updated":"2017-10-12T09:11:45.204Z","comments":true,"path":"2017/08/09/如何做好项目总结/","link":"","permalink":"//hjm100.cn/Blogs/2017/08/09/如何做好项目总结/","excerpt":"","text":"一、认识项目总结： 项目总结是一个阶段性的汇报，主要分为以下几部分 1、你的阶段性工作内容 2、项目中的问题 3、怎么解决问题 4、以及还有那些困惑 5、你的心得分享 注意：禁忌不可抱怨（公司最烦抱怨的员工） 二、做好总结前准备（特别是表达欠缺的员工） 总结前的准备，你可以以PPT，word文档以及记事本的方式来帮自己梳理要将的内容 一方面可以减少你的恐惧，另一方面帮助你思路清晰，最主要的是如果你将的不清晰 大家也知道你这段时间干的啥，以及你想要表单的是什么！ 总结准备内容格式随意，建议从上面的几点下手，一步一步不断完善。 三、项目总结流程 1、做好笔记，特别是别人的心得体会，以及老大的点评，有些是技术分享，有些是工作经验 可能对你接下来的工作，以及今后的发展有很大的帮助。 2、察言观色，认真听别人的汇报方式，取长补短，学习表达思路以及表达能力很重要 3、我的总结，在自己总结前，先要将自己的总结准备发到讨论组里，不要急于总结， 可以让大家预先了解一下你的总结内容，总结时语速放慢，给大家一个消耗的空间， 并且可以缓解自己的压力！ 四、总结整理 总结后一定要抽时间做一次总结反思，反思你的汇报效果，以及吸取到的知识技能， 因为可能随时记录的有点乱，过几天就忘记，没有起到总结的目的，通过总结整理， 让这些干活来补充你的知识欠缺。 注：人生之路是一个不断填坑的过程，重复性的错误不要犯第二次，不断完善自己的人生体系 不止是你的，技术能力，思路能力，表达能力一样重要！（表达能力是人与人之间沟通的桥梁） 附录：2017年9月1日阶段性项目总结 鸿基梦 时间：2017.8.31 一、工作内容 1、代理商后台 1)代理商后台“俱乐部”，“俱乐部名单”模块 2)代理商任务系统 3)代理商前端页面 2、游戏内嵌页 1)邀请有礼页面 2)个人物品以及兑换中心改版 二、心得体会 1.了解需求 |–拿到需求后，了解需求，该需求要解决的问题，想要达到什么效果 2.制定计划 |–对工作量和完成时间有个大体预估 3.敢于质疑 |–对产品提出方案的可实施性，是否合理要仔细思考 4.先理清表结构 |–工作第一步，先建表，后写代码 5.技术难点 |–事先做好技术考察，技术准备 6.按时完成工作 |–对自己工作负责 三、我与lua 1、项目问题： 1)在JS中运行lua？ 2)Lua.vm.js API不够用? 3)用lua可以创建dom元素？ …… 2.lua使用： local window = js.global -- window是JS中的global对象 window.alert(\"hello form lua!\") 大米：lua.vm.js可以实现弹出alert框，找一找看看还有什么API可以实现JS功能的。 网站资源找遍后，没有看到更多，放弃了！ 华哥：lua.vm.js可以实现弹出alert框，说明这个js确实可以实现用lua实现JS功能， 那它一定能创建DOM，只是我们 没有找到方法。要多试试，找到方法 3、启示： 在资源有限的情况下，我们要懂得从有限的信息中，寻找共性， 再结合自己已经掌握的知识，多动手，多尝试。别人说的“不可能 实现”,“肯定可以实现”,都不一定可信，一定 要自己动手。 思维不要受限 四、IOS统一链接 解决问题（在预发布环境中，邀请有礼二维码，IOS扫描后，直接启动 客户端） 注意 ： 1）IOS 9 以后支持通过超链接打开APP, “**”的统一链接现在 改为了 “**/openapp.html” 2）以后有打开app需求的页面，都可以通过该链接打开，如果页面没有特殊要求的话 五、总结完毕谢谢！","categories":[{"name":"习惯","slug":"习惯","permalink":"//hjm100.cn/Blogs/categories/习惯/"}],"tags":[{"name":"工作习惯","slug":"工作习惯","permalink":"//hjm100.cn/Blogs/tags/工作习惯/"}]}]}